const express = require('express');
const cors = require('cors');
const multer = require('multer');
const nodemailer = require('nodemailer');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs-extra');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Gemini configuration
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// Nodemailer configuration
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Multer configuration for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);
  },
});

const upload = multer({ storage });

// Ensure uploads directory exists
fs.ensureDirSync('uploads');

// Routes
app.post('/upload', upload.single('meetingNotes'), async (req, res) => {
  try {
    const { customPrompt } = req.body;
    const file = req.file;

    if (!file) {
      return res.status(400).json({ success: false, error: 'No file uploaded' });
    }

    // Read file content
    const fileContent = await fs.readFile(file.path, 'utf8');

    // Prepare prompt for Gemini
    const systemPrompt = 'Please provide a clear and concise summary of these meeting notes, highlighting key points, decisions, and action items. ' + customPrompt;
    
    const prompt = `${systemPrompt}\n\nMeeting Notes to Summarize:\n\n${fileContent}`;
    
    console.log('Sending request to Gemini...');
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const summary = response.text();
    
    console.log('Summary generated successfully');

    // Clean up uploaded file
    await fs.remove(file.path);

    res.json({ success: true, summary });
  } catch (error) {
    console.error('Error processing file:', error);
    res.status(500).json({ success: false, error: error.message || 'Failed to process file' });
  }
});

app.post('/send-email', async (req, res) => {
  try {
    const { recipients, subject, summary } = req.body;

    if (!recipients || !Array.isArray(recipients) || recipients.length === 0) {
      return res.status(400).json({ success: false, error: 'Recipients are required' });
    }

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: recipients.join(', '),
      subject: subject || 'Meeting Summary',
      html: `
        <div style="font-family: 'Arial', sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #faf9f6; color: #3e3e3e;">
          <div style="background-color: #f5f5dc; padding: 30px; border-radius: 12px; border: 1px solid #e0dacd;">
            <h2 style="color: #8c7b5a; margin-bottom: 20px; text-align: center;">Meeting Summary</h2>
            <div style="background-color: #d9cbb3; padding: 20px; border-radius: 8px; line-height: 1.6; white-space: pre-wrap;">
${summary}
            </div>
            <br>
            <p style="color: #8c7b5a; font-size: 12px; text-align: center; margin-top: 20px;">
              This summary was generated by AI Meeting Notes Summarizer
            </p>
          </div>
        </div>
      `,
    };

    console.log('Sending email to:', recipients);
    await transporter.sendMail(mailOptions);
    console.log('Email sent successfully');
    
    res.json({ success: true, message: 'Email sent successfully' });
  } catch (error) {
    console.error('Error sending email:', error);
    res.status(500).json({ success: false, error: error.message || 'Failed to send email' });
  }
});

app.get('/health', (req, res) => {
  res.json({ success: true, message: 'Server is running' });
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log('Environment variables loaded:');
  console.log('- Gemini API Key:', process.env.GEMINI_API_KEY ? 'Present' : 'Missing');
  console.log('- Email User:', process.env.EMAIL_USER ? 'Present' : 'Missing');
  console.log('- Email Pass:', process.env.EMAIL_PASS ? 'Present' : 'Missing');
});
